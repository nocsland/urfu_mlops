pipeline {
    agent any

    options {
        skipDefaultCheckout(true)
    }

    stages {
        stage('Stop and remove old container and image') {
            steps {
                script {
                    sh 'docker stop translator-app && docker rm translator-app || true'
                    sh 'docker rmi translator-img || true'
                }
            }
        }

        stage('Preparation') {
            steps {
                cleanWs()
                checkout scm
            }
        }


        stage('Checkout') {
            steps {
                git branch: params.BRANCH_NAME, url: 'https://github.com/nocsland/urfu_mlops.git'
            }
        }

        stage('Download dataset') {
            steps {
                script {
                    dir('translator/') {
                        sh 'dvc pull -r "translator"'
                    }
                }
            }
        }

        stage('Build image') {
            steps {
                script {
                    dir('translator/') {
                        sh 'docker build -t translator-img .'
                    }
                }
            }
        }

        stage('Run container') {
            steps {
                script {
                    sh 'docker run -d -p 8000:8000 --restart unless-stopped --name translator-app translator-img'
                }
            }
        }

        stage('Install dependencies') {
            steps {
                script {
                    dir('translator/') {
                        sh 'sudo apt-get update && sudo apt-get install -y python3-pip python3-venv'
                        sh 'python3 -m venv venv'
                        sh 'chmod +x venv/bin/activate'
                        sh './venv/bin/activate'
                        sh 'pip3 install -r requirements.txt'
                    }
                }
            }
        }

        stage('Run tests') {
            steps {
                script {
                    dir('translator/') {
                        sh 'python3 -m pytest --alluredir allure-results'
                    }
                }
            }
        }

        stage('Collect Allure results') {
            steps {
                script {
                    dir('translator/') {
                        allure([
                            includeProperties: false,
                            jdk: '',
                            properties: [],
                            reportBuildPolicy: 'ALWAYS',
                            results: [[path: 'allure-results']]
                        ])
                    }
                }
            }
        }

        stage('Generate Allure report') {
            steps {
                script {
                    dir('translator/') {
                        sh 'allure generate allure-results --clean -o allure-report'
                    }
                }
            }
        }
    }
}