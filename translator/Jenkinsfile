pipeline {
    agent any
    options {
    // 'Preparing for the build'
    // This is required if you want to clean before build
        skipDefaultCheckout(true)
    }

    environment {
     // Environment variables for the pipeline
        JENKINS_HOME = "$JENKINS_HOME"
        BUILD = "${JENKINS_HOME}/workspace/mlops"
    }

    stages {
        stage('Stop and remove container') {
            steps {
                script {
                    sh 'docker stop translator-app && docker rm translator-app || true'
                }
            }
        }
        stage('Remove image') {
            steps {
                script {
                    sh 'docker rmi translator-img || true'
                }
            }
        }
        stage('Preparation') {
        // 'Preparing for the build'
            steps {
                cleanWs()
                checkout scm


            }
        }

        stage('Checkout') {
        // 'Checking out the repository'
            steps {
                git branch: 'feature/add-allure-pytest', url: 'https://github.com/nocsland/urfu_mlops.git'
            }
        }

        stage('Build image') {
        // 'Building the Docker image'
            steps {
                script {
                    dir('translator/') {
                        sh 'docker build -t translator-img .'
                    }
                }
            }
        }

        stage('Run container') {
        // 'Running the Docker container'
            steps {
                script {
                    sh 'docker run -d -p 8000:8000 --name translator-app translator-img'
                }
            }
        }

        stage('Install dependencies') {
            steps {
                script {
                    dir('translator/') {
                        sh 'sudo apt update && sudo apt install -y python3-pip python3-venv'
                        sh 'python3 -m venv venv'
                        sh 'chmod +x venv/bin/activate'
                        sh './venv/bin/activate'
                        sh 'pip3 install -r requirements.txt'
                    }
                }
            }
        }
/*
        stage('Run tests') {
            steps {
                script {
                    dir('translator/') {
                        // 'Running tests'
                        sh 'python3 -m pytest --alluredir allure-results'
                    }
                }
            }
        }

        stage('Collect Allure results') {
            steps {
                script {
                    dir('translator/') {
                        allure([
                            includeProperties: false,
                            jdk: '',
                            properties: [],
                            reportBuildPolicy: 'ALWAYS',
                            results: [[path: 'allure-results']]
                        ])
                    }
                }
            }
        }

        stage('Generate Allure report') {
            steps {
                script {
                    dir('translator/') {
                        sh 'allure generate allure-results --clean -o allure-report'
                    }
                }
            }
        }
    }
}